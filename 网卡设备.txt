网卡设备驱动
1、内核中关于网卡设备相关的框架
2、虚拟网卡的设备驱动
3、分析硬件
	1.DM9000芯片的datasheet
	2.硬件原理图
	3.和CPU相关的接口
4、内核中自带网卡驱动程序是如何完成的,移植网卡驱动要注意的点。
===============================================================
======================================
	1.内核中关于网卡设备相关的框架
======================================
TCP/UDP
socket
bind
listen
accept
recv
send
网卡设备是工作于网络接口层
1.1核心数据结构(一块网卡对应一个struct结构)	
	struct net_device
	{
		name,
		base_addr,	//I/O基地址
		irq			//中断号
		net_device_ops		//网卡设备操作函数
		{
			(*ndo_start_xmit) (struct sk_buff *skb,
						   struct net_device *dev);
			//发送函数
		}
	}
	操作:
	alloc_etherdev(...)	//申请net_device
	register_netdev(...)	
	unregister_netdev(...)
1.2网卡数据的收发函数
	1)发送数据
	(*ndo_start_xmit) (struct sk_buff *skb,
	struct net_device *(指定哪个网卡,对应的在UC下创建socket时指定IP地址));
	2)接收数据
	将网卡中收到的数据拷贝到DDRAM,形成一个struct sk_buff结构体
	然后调用netif_rx(...),驱动程序中的接收工作就完成了。
1.3struct sk_buff结构 (驱动层收发数据的基本单元)
	
	释放	sk_buff_dev_kfree_skb(...)
	申请	dev_alloc_skb(...)
	
======================================
	2.虚拟网卡的设备驱动
======================================
	
	struct net_device_ops vir_netdev_ops=
	{
			init
			open
			strat_xmit
	};

	init 
	{
		分配一个net_device 		alloc_etherdev(0)
		设置它(关联它的操作函数集合)	virnet_card->netdev_ops = &你的
		设置完了注册它		register_netdev(virnet_card);
	
		//注册中断程序,完成数据的接收
	}
	exit
	{
		注销
		释放
	}
	
======================================
	3、分析硬件
======================================
	3.1DM9000芯片手册
		(1) 10M/100M
		(2)	8bits /16bits
		(3)	一共16K SRAM 分为 TX SRAM 3k(缓存区)/RX SRAM 13k
		(4) 片选cs#
		(5)	CMD(高电平	data port
				低电平	index port)
		(6) INT
		(7)	EECK(高电平	INT 低有效
				 低电平	INT 高有效)
		(8)	EECS(高电平	bus	width 8bits
				 低电平	bus width 16bits)
		(9)寄存器的每个bit的意义?
		(10) 往DM9000内部寄存器TCR写入0x02(0x55)
			0x02-->index
			0x55-->data
			例一:要让DM9000接收index 0x02
				1.保证片选	0x88000000(地址总线)	CS拉低
				2.CMD要为低电平	即地址总线的bit2位为0
					数据总线设为0x02
				3.C实现:
					volatile unsigned int *p = 0x88000000;
					*p = 0x02;
			例二:送0x55 data到DM9000
				1.片选 
				2.CMD要为高电平	即地址总线的bit2位为1
				数据总线:0x55
				地址总线:0x88000004
				
		(11) 收发数据 (第九章)
			发送数据过程
			a.要发送数据写入TX SRAM(DMA的方式)
			b.设置要发送的数据的长度到0xfc 0xfd寄存器里面去
			c.control寄存器 bit 1?
	3.2硬件原理图
		(1)DM9000芯片的SD0~SD15连接到CPU的databus0~16
		(2)CMD 连接到CPU的addr bus bit2
		(3)CS  连接到CPU的XM0csn1--->对应的就是bank1
		(4)INT XEINT10
		(5)EECS	低:工作在16bits模式
		(6)EECK	低:INT高电平有效
				这两个没连接(NC)可以去测它是高电平还是低电平
		
	3.3和CPU相关的接口
		(1)DM9000挂在BANK1
			BANK1的地址:0x88000000 ~ 0x8FFFFFFF
			所以当CPU的地址总线上出现的值为以上范围内的任意值,都会把CSN1拉低
			(这里实现的原理:CPU将地址发给mem control,内存控制器会把CSN1拉低)
			,CSN1连接的是DM9000的CS片选线，选中它。
		
======================================
	4、内核中的DM9000
======================================	
	1.找到内核中dm9000的文件
		在make menuconfig找到路径和变量
		在路线下的Makefile搜索这个变量
		找到对应的.c文件 dm9000.c
		在这个文件中搜索dm9000_init(void)
		发现它也是按照platform总线架构完成的。
	2.platform:
		设备	mach-smdkv210.c
		驱动	dm9000.c
	3.移植网卡驱动需要注意的问题
		(1)driver下的资源resource(platform_device)
			使用的物理地址
			使用的中断号
			中断的有效位
			位宽
		(2)设置内存控制器
			a)设置外接设备的位宽
				SROM
			b)读写时序
				SROM_BCx
		
		
		
		
		
		
		
		




















